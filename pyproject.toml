[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "flowplayground"
version = "1.0.0"
description = "AI-powered photo and video processing backend for iOS applications"
authors = [
    {name = "FlowPlayground Team"},
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.8"
dependencies = [
    "fastapi>=0.115.2",
    "uvicorn[standard]>=0.24.0",
    "aiohttp>=3.9.1",
    "aiofiles>=23.2.1",
    "pydantic>=2.7.0",
    "pydantic-settings>=2.1.0",
    "redis>=5.0.1",
    "Pillow>=10.1.0",
    "python-multipart>=0.0.6",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Multimedia :: Graphics",
    "Topic :: Multimedia :: Video",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
keywords = ["ai", "image-processing", "video-processing", "fastapi", "api", "ios"]

[project.optional-dependencies]
dev = [
    "gradio>=4.8.0",
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "black>=23.11.0",
    "isort>=5.12.0",
    "mypy>=1.7.1",
    "ruff>=0.1.6",
    "pre-commit>=3.6.0",
    "httpx>=0.25.2",
    "factory-boy>=3.3.0",
    "faker>=20.1.0",
]
prod = [
    "gunicorn>=21.2.0",
    "python-jose[cryptography]>=3.3.0",
    "cryptography>=41.0.7",
    "passlib[bcrypt]>=1.7.4",
    "python-dotenv>=1.0.0",
]
monitoring = [
    "prometheus-client>=0.19.0",
    "structlog>=23.2.0",
]
tasks = [
    "celery>=5.3.4",
    "flower>=2.0.1",
]
security = [
    "slowapi>=0.1.9",
    "bandit>=1.7.0",
]
docs = [
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.4.8",
]
ml = [
    "torch>=2.1.1",
    "torchvision>=0.16.1",
    "transformers>=4.36.0",
    "diffusers>=0.24.0",
    "opencv-python>=4.8.1",
]
all = [
    "flowplayground[dev,prod,monitoring,tasks,security,docs]",
]

[project.urls]
Homepage = "https://github.com/yourusername/flowplayground"
Repository = "https://github.com/yourusername/flowplayground"
Documentation = "https://docs.flowplayground.com"
"Bug Tracker" = "https://github.com/yourusername/flowplayground/issues"

[project.scripts]
flowplayground = "app.main:app"

[tool.setuptools.packages.find]
where = ["."]
include = ["app*", "gradio_app*"]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
skip_gitignore = true

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "gradio.*",
    "redis.*",
    "aiofiles.*",
    "PIL.*",
    "cv2.*",
    "torch.*",
    "torchvision.*",
    "transformers.*",
    "diffusers.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests",
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "network: marks tests as requiring network access",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/env/*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.ruff]
target-version = "py38"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["E501"]

[tool.ruff.mccabe]
max-complexity = 10

[tool.bandit]
exclude_dirs = ["tests", "venv", "env"]
skips = ["B101", "B601"]